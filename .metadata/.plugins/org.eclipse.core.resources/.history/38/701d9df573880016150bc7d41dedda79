
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

public class State {

	private int x;
	private int y;
	private int finalX;
	private int finalY;
	private int[][] board;
	private int boardWidth;
	private int boardHeight;
	private int arcCost = 1;
	
	public void readState(String textfile)
	{
		board = new int[1000][1000];
		Path boardpath = Paths.get(textfile);
		String[] splitted;
		try {
			List<String> lines = Files.readAllLines(boardpath);
			int row = 0;
			for(String line:lines)
			{
				splitted = line.split("(?!^)");
				boardWidth = splitted.length;
				for(int col = 0; col < splitted.length; col++)
				{
					if(splitted[col].equals("."))
						board[row][col] = 0;
					else if(splitted[col].equals("#"))
						board[row][col] = 1;
					else if(splitted[col].equals("A"))
					{
						board[row][col] = 0;
						x = col;
						y = row;
					}
					else if(splitted[col].equals("B"))
					{
						board[row][col] = 0;
						finalX = col;
						finalY = row;
					}
				}
				row++;
			}
			boardHeight = row + 1;
				
			
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
	
	public boolean moreSuccessorsExist(State current)
	{
		if(current.getX() == x-1 && current.getY() == y)
			return false;
		return true;
	}
	
	public State generateFirstSuccessor()
	{
		State first = new State();
		if(board[x][y-1] == 0){
System.out.print("zero");
			first.setX(x);
			first.setY(y-1);
		}else if(board[x+1][y] == 0){
			first.setX(x+1);
			first.setY(y);
		}else if(board[x][y+1] == 0){
			first.setX(x);
			first.setY(y+1);
		}else if(board[x-1][y]== 0){
			first.setX(x-1);
			first.setY(y);
		}else
			return null;
		first.setBoard(board);
		first.setFinalX(finalX);
		first.setFinalY(finalY);
		return first;
	}
	
	public State generateNextSuccessor(State current){
		if(current == null)
			return null;
		State next = new State();
		next.setBoard(board);
		next.setFinalX(finalX);
		next.setFinalY(finalY);
		if(current.getX() == x && current.getY() == y-1 && (y-1)>0){
			next.setX(x+1);
			next.setY(y);
			return next;
		}else if(current.getX() == x + 1 && current.getY() == y && (x+1)<boardWidth){
			next.setX(x);
			next.setY(y+1);
			return next;
		}else if(current.getX() == x && current.getY() == y + 1 && (y+1)<boardHeight){
			next.setX(x-1);
			next.setY(y);
			return next;
		}
		return null;
	}
	
	public boolean isSolution()
	{
		if(x == finalX && y == finalY)
			return true;
		return false;
	}
	
	public boolean isEqualTo(State S){
		if(this.x == S.getX() && this.y == S.getY())
			return true;
		return false;
	}
	
	public int calcH(){
		return (finalX-x)^2 + (finalY-y)^2;
	}
	
	public int getArcCost(){
		return arcCost;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}

	public int getFinalX() {
		return finalX;
	}

	public void setFinalX(int finalX) {
		this.finalX = finalX;
	}

	public int getFinalY() {
		return finalY;
	}

	public void setFinalY(int finalY) {
		this.finalY = finalY;
	}

	public int[][] getBoard() {
		return board;
	}

	public void setBoard(int[][] board) {
		this.board = board;
	}
	
	public int getBoardHeight(){
		return boardHeight;
	}
	
	public int getBoardWidth(){
		return boardWidth;
	}
	
}
