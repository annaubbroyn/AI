
import java.util.Arrays;
import java.io.*;

public class Node {
	
	private double g;			//Cost of getting from root node to this node
	private double h;			//Estimated cost of getting from this node to goal node
	private double f;			//Estimated total cost with this node included in path
	private State state;		//A class describing the state of this node (position and so on)
	private int status;			//Status which is either open or closed (or none of them)
	public Node parent;			//Best parent (previous node)
	public Node kids;			//Kids (possible next nodes)
	public Node nextInQUEUE;	//Next node to evaluate (either next in OPEN, CLOSED or successor-queue)
	public Node nextSibling;	//Next sibling to evaluate
	
	//Defailt constructor
	public Node(){
		g=0;
		h=0;
		f=0;
		state = null;
		parent = null;
		kids = null;
		nextInQUEUE = null;
		nextSibling = null;
	}

	//Pushes newNode to this queue of nodes - SHOULD MAKE MORE EFFICIENT
	public void push(Node newNode){
		Node iterator = this;
		//While iterator is not the last node in the queue, to to next node in queue
		while (iterator.nextInQUEUE != null)
			iterator = iterator.nextInQUEUE;
		//Inserting the new node at the end of the queue
		iterator.nextInQUEUE = newNode;
		//Letting the new node now be the last one in the queue (i.e. pointing at null)
		newNode.nextInQUEUE = null;			
	}
	
	//Same function as push, only using siblings as queue
	public void pushToKids(Node newKid){
		Node iterator = kids;
		while (iterator.nextSibling != null)
			iterator = iterator.nextSibling;
		iterator.nextSibling = newKid;
		newKid.nextSibling = null;			
	}
	
	//Inserting new node in this queue which is sorted by ascending f-value 
	public void insert(Node newNode){
		Node iterator = this;
		//If the new node has the lowest f value, place it in the beginning of this queue
		if(f > newNode.getF())
			newNode.nextInQUEUE = this;
		//Else if this queue only contain one node, place the new node at the end (second) of this queue 
		else if(nextInQUEUE == null){
			nextInQUEUE = newNode;
			newNode.nextInQUEUE = null;
		}
		//Else go through the queue and checking if the next node in the queue has higher f value than new node
		else{
			double nextf = nextInQUEUE.getF();
			while(nextf<newNode.getF() && iterator.nextInQUEUE != null){
				iterator = iterator.nextInQUEUE;
				if(iterator.nextInQUEUE != null)
					nextf = iterator.nextInQUEUE.getF();
			}
			Node temp = iterator.nextInQUEUE;
			iterator.nextInQUEUE = newNode;
			newNode.nextInQUEUE = temp;
		}
	}
	
	//Printing board and path to output file
	public void print(String outputfile){
		try {
			PrintWriter writer = new PrintWriter(outputfile);

			int board[][] = state.getBoard();
			int pathX[] = new int[1000]; //x-position of path
			int pathY[] = new int[1000]; //y-position of path

			int pathIndex = 0;
			int startMarker = -2;
			int finalMarker = -3;
			
			//Initializing path to be at the final position and tracking path using best parent
			Node path = this;
			while(path.parent != null){
				pathX[pathIndex] = path.getState().getX();
				pathY[pathIndex++] = path.getState().getY();
				path = path.parent;
			}
			writer.println(Arrays.toString(Arrays.copyOfRange(pathX, 0, pathIndex)));
			writer.println(Arrays.toString(Arrays.copyOfRange(pathY, 0, pathIndex)));
			for(int row = 0; row<state.getBoardHeight(); row++){
				writer.println(Arrays.toString(Arrays.copyOfRange(board[row], 0, state.getBoardWidth())));
			}
			writer.close();

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} 
			}
	
	public int arcCost(Node P){
		return state.getArcCost();
	}
	public void calcH(){ 
		h = state.calcH(); 
	}
	public void updateG(double g)
	{
		this.g = g;
		Node kid = kids;
		while(kid != null){
			kid.updateG(g + kid.arcCost(this));
			kid.calcH();
			kid.updateF();
			kid = kid.nextSibling;
		}
		
	}
	public Node generateAllSuccessors(){
		Node SUCC = new Node();
		Node succ = SUCC;
		succ.setState(state.generateFirstSuccessor());
		succ.nextInQUEUE = new Node();
		succ.nextInQUEUE.setState(state.generateNextSuccessor(succ.getState()));
		while(succ.nextInQUEUE.getState() != null)
		{
			succ = succ.nextInQUEUE;
			succ.nextInQUEUE = new Node();
			succ.nextInQUEUE.setState(state.generateNextSuccessor(succ.getState()));
		}
		succ.nextInQUEUE = null;
		return SUCC;
	}
	public void updateF(){
		this.f = this.g + this.h;
	}
	public boolean isEqualTo(Node X){
		if(X.state == null)
			return false;
		return this.state.isEqualTo(X.state);
	}
	public double getG() {
		return g;
	}
	public double getH() {
		return h;
	}
	public void setH(int h) {
		this.h = h;
	}
	public double getF() {
		return f;
	}
	public void setF(int f) {
		this.f = f;
	}
	public State getState() {
		return state;
	}
	public void setState(State state) {
		this.state = state;
	}

	public int getStatus() {
		return status;
	}

	public void setStatus(int status) {
		this.status = status;
	}	

}
