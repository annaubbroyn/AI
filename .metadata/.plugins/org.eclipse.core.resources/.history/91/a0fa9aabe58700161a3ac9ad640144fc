
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

public class State {

	private int x;
	private int y;
	private int finalX;
	private int finalY;
	private int[][] board;
	private int boardWidth;
	private int boardHeight;
	private int arcCost = 1;
	
	public void readState(String textfile)
	{
		Path boardpath = Paths.get(textfile);
		String[] splitted;
		try {
			List<String> lines = Files.readAllLines(boardpath);
			int row = 0;
			for(String line:lines)
			{
				splitted = line.split("(?!^)");
				boardWidth = splitted.length;
				for(int col = 0; col < splitted.length; col++)
					if(splitted[col] == ".")
						board[row][col] = 0;
					else if(splitted[col] == "#")
						board[row][col] = 1;
					else if(splitted[col] == "A")
					{
						board[row][col] = 0;
						x = row;
						y = col;
					}
					else if(splitted[col] == "B")
					{
						board[row][col] = 0;
						finalX = row;
						finalY = col;
					}
				row++;
			}
			boardHeight = row + 1;
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public boolean isSolution()
	{
		if(x == finalX && y == finalY)
			return true;
		return false;
	}
	
	public boolean isEqualTo(State S){
		if(this.x == S.getX() && this.y == S.getY())
			return true;
		return false;
	}
	
	public int calcH(){
		return (finalX-x)^2 + (finalY-y)^2;
	}
	
	public int getArcCost(){
		return arcCost;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}

	public int getFinalX() {
		return finalX;
	}

	public void setFinalX(int finalX) {
		this.finalX = finalX;
	}

	public int getFinalY() {
		return finalY;
	}

	public void setFinalY(int finalY) {
		this.finalY = finalY;
	}

	public int[][] getBoard() {
		return board;
	}

	public void setBoard(int[][] board) {
		this.board = board;
	}
	
}
