
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

public class State {

	private State1 state1;
	private State2 state2;
	
	public void readState(String textfile){
		if(state1 != null)
			state1.readState(textfile);
		else if(state2 != null)
			state2.readState(textfile);
	}
	
	public boolean moreSuccessorsExist(State current){
		if(state1 != null)
			return state1.moreSuccessorsExist(current);
		else if(state2 != null)
			return state2.moreSuccessorsExist(current);
		else
			return false;
	}
	
	public State generateFirstSuccessor()
	{
		if(state1 != null)
			return state1.generateFirstSuccessor();
		else if(state2 != null)
			return state2.generateFirstSuccessor();
		else
			return null;
	}
	
	public State generateNextSuccessor(State current){
		if(current == null)
			return null;
		State next = new State();
		next.setBoard(board);
		next.setBoardWidth(boardWidth);
		next.setBoardHeight(boardHeight);
		next.setFinalX(finalX);
		next.setFinalY(finalY);
		if(current.getX() == x && current.getY() == y-1){
			if((x+1)<boardWidth && board[y][x+1] == 0){
				next.setX(x+1);
				next.setY(y);
				return next;
			}else if((y+1)<boardHeight && board[y+1][x] == 0){
				next.setX(x);
				next.setY(y+1);
				return next;
			}else if(x>0 && board[y][x-1] == 0){
				next.setX(x-1);
				next.setY(y);
				return next;
			}else
				return null;
		}else if(current.getX() == x+1 && current.getY() == y){
			if((y+1)<boardHeight && board[y+1][x] == 0){
				next.setX(x);
				next.setY(y+1);
				return next;
			}else if(x>0 && board[y][x-1] == 0){
				next.setX(x-1);
				next.setY(y);
				return next;
			}else
				return null;
		}else if(current.getX() == x && current.getY() == y+1 && x>0 && board[y][x-1] == 0 ){
			next.setX(x-1);
			next.setY(y);
			return next;
		}
		return null;
	}
	
	public boolean isSolution()
	{
		if(x == finalX && y == finalY)
			return true;
		return false;
	}
	
	public boolean isEqualTo(State S){
		if(this.x == S.getX() && this.y == S.getY())
			return true;
		return false;
	}
	
	public int calcH(){
		return (finalX-x)*(finalX-x) + (finalY-y)*(finalY-y);
	}
	
	public int getArcCost(){
		return arcCost;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}

	public int getFinalX() {
		return finalX;
	}

	public void setFinalX(int finalX) {
		this.finalX = finalX;
	}

	public int getFinalY() {
		return finalY;
	}

	public void setFinalY(int finalY) {
		this.finalY = finalY;
	}

	public int[][] getBoard() {
		return board;
	}

	public void setBoard(int[][] board) {
		this.board = board;
	}
	
	public int getBoardHeight(){
		return boardHeight;
	}
	
	public int getBoardWidth(){
		return boardWidth;
	}
	
	public void setBoardHeight(int boardHeight){
		this.boardHeight = boardHeight;
	}
	
	public void setBoardWidth(int boardWidth){
		this.boardWidth = boardWidth;
	}
}
