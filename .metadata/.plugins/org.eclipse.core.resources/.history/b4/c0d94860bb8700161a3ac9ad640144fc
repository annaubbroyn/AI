
//import java.util.*;

public class AStar {
	
	public static Node AStar_algorithm()
	{
		Node CLOSED = null;
		Node OPEN = null;
		
		Node n0 = new Node();
		n0.setG(0);
		n0.calcH();
		n0.updateF();
		OPEN = n0;
		
		while(true)
		{
			if(OPEN == null)
				return null;
			Node X = pop(OPEN);
			push(CLOSED, X);
			if(isSolution(X))
				return X;
			
			Node SUCCnode = generateAllSuccessors(X);
			
			while(SUCCnode != null)
			{
				Node next = SUCCnode.nextInQUEUE;
				boolean found_in_OPEN = false;
				boolean found_in_CLOSED = false;
				Node iterator = OPEN;
				while(iterator != null)
				{
					if(SUCCnode.isEqualTo(iterator))
					{
						SUCCnode = iterator;
						found_in_OPEN = true;
						break;
					}
					iterator = iterator.nextInQUEUE;
				}
				if(!found_in_OPEN)
				{
					iterator = CLOSED;
					while(iterator != null)
					{
						if(SUCCnode.isEqualTo(iterator))
						{
							SUCCnode = iterator;
							found_in_CLOSED = true;
							break;
						}
						iterator = iterator.nextInQUEUE;
					}
				}
				pushToKids(X.kids, SUCCnode);
				if(!found_in_OPEN && !found_in_CLOSED)
				{
					attachAndEval(SUCCnode, X);
					insert(OPEN, SUCCnode);
				}
				else if((X.getG() + arcCost(X, SUCCnode)) < SUCCnode.getG())
				{
					attachAndEval(SUCCnode, X);
					if(found_in_CLOSED)
						propagatePathImprovements(SUCCnode);
				}
				SUCCnode = next;
			}	
		}
	}
	
	public static void main(String[] args)
	{
		
		Node mySolution = AStar_algorithm();
		if(mySolution == null)
			System.out.println("Could not find solution");
		else
		{
			System.out.println("A solution was found: ");
			mySolution.print();
		}

		
	}
	
}
